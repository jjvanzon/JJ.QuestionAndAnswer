<?xml version="1.0"?>
<doc>
    <assembly>
        <name>JJ.Framework.Conversion</name>
    </assembly>
    <members>
        <member name="T:JJ.Framework.Conversion.DecimalParser">
            <summary>
            For instance making it easier to parse nullable Decimal.
            Static classes cannot get extension members.
            Otherwise these would have been extensions.
            Instead we have the DecimalParser class for extra static members.
            </summary>
        </member>
        <member name="M:JJ.Framework.Conversion.DecimalParser.TryParse(System.String,System.IFormatProvider,System.Decimal@)">
            <summary>
            If you want to use Decimal.TryParse with a format provider,
            then you are obliged to also pass NumberStyles.
            If you ever wonder what NumberStyles to pass,
            just call this method instead. It will mimic the default behavior of TryParse.
            </summary>
        </member>
        <member name="M:JJ.Framework.Conversion.DecimalParser.TryParse(System.String,System.IFormatProvider,System.Nullable{System.Decimal}@)">
            <summary> Parses a nullable Decimal. </summary>
        </member>
        <member name="M:JJ.Framework.Conversion.DecimalParser.TryParse(System.String,System.Globalization.NumberStyles,System.Nullable{System.Decimal}@)">
            <summary> Parses a nullable Decimal. </summary>
        </member>
        <member name="M:JJ.Framework.Conversion.DecimalParser.TryParse(System.String,System.Nullable{System.Decimal}@)">
            <summary> Parses a nullable Decimal. </summary>
        </member>
        <member name="M:JJ.Framework.Conversion.DecimalParser.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Nullable{System.Decimal}@)">
            <summary> Parses a nullable Decimal. </summary>
        </member>
        <member name="T:JJ.Framework.Conversion.DoubleParser">
            <summary>
            For instance making it easier to parse nullable Double.
            Static classes cannot get extension members.
            Otherwise these would have been extensions.
            Instead we have the DoubleParser class for extra static members.
            </summary>
        </member>
        <member name="M:JJ.Framework.Conversion.DoubleParser.TryParse(System.String,System.IFormatProvider,System.Double@)">
            <summary>
            If you want to use Double.TryParse with a format provider,
            then you are obliged to also pass NumberStyles.
            If you ever wonder what NumberStyles to pass,
            just call this method instead. It will mimic the default behavior of TryParse.
            </summary>
        </member>
        <member name="M:JJ.Framework.Conversion.DoubleParser.TryParse(System.String,System.IFormatProvider,System.Nullable{System.Double}@)">
            <summary> Parses a nullable Double. </summary>
        </member>
        <member name="M:JJ.Framework.Conversion.DoubleParser.TryParse(System.String,System.Globalization.NumberStyles,System.Nullable{System.Double}@)">
            <summary> Parses a nullable Double. </summary>
        </member>
        <member name="M:JJ.Framework.Conversion.DoubleParser.TryParse(System.String,System.Nullable{System.Double}@)">
            <summary> Parses a nullable Double. </summary>
        </member>
        <member name="M:JJ.Framework.Conversion.DoubleParser.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Nullable{System.Double}@)">
            <summary> Parses a nullable Double. </summary>
        </member>
        <member name="T:JJ.Framework.Conversion.Int16Parser">
            <summary>
            For instance making it easier to parse nullable Int16.
            Static classes cannot get extension members.
            Otherwise these would have been extensions.
            Instead we have the Int16Parser class for extra static members.
            </summary>
        </member>
        <member name="M:JJ.Framework.Conversion.Int16Parser.TryParse(System.String,System.IFormatProvider,System.Int16@)">
            <summary>
            If you want to use Int16.TryParse with a format provider,
            then you are obliged to also pass NumberStyles.
            If you ever wonder what NumberStyles to pass,
            just call this method instead. It will mimic the default behavior of TryParse.
            </summary>
        </member>
        <member name="M:JJ.Framework.Conversion.Int16Parser.TryParse(System.String,System.IFormatProvider,System.Nullable{System.Int16}@)">
            <summary> Parses a nullable Int16. </summary>
        </member>
        <member name="M:JJ.Framework.Conversion.Int16Parser.TryParse(System.String,System.Globalization.NumberStyles,System.Nullable{System.Int16}@)">
            <summary> Parses a nullable Int16. </summary>
        </member>
        <member name="M:JJ.Framework.Conversion.Int16Parser.TryParse(System.String,System.Nullable{System.Int16}@)">
            <summary> Parses a nullable Int16. </summary>
        </member>
        <member name="M:JJ.Framework.Conversion.Int16Parser.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Nullable{System.Int16}@)">
            <summary> Parses a nullable Int16. </summary>
        </member>
        <member name="T:JJ.Framework.Conversion.Int32Parser">
            <summary>
            For instance making it easier to parse nullable Int32.
            Static classes cannot get extension members.
            Otherwise these would have been extensions.
            Instead we have the Int32Parser class for extra static members.
            </summary>
        </member>
        <member name="M:JJ.Framework.Conversion.Int32Parser.TryParse(System.String,System.IFormatProvider,System.Int32@)">
            <summary>
            If you want to use Int32.TryParse with a format provider,
            then you are obliged to also pass NumberStyles.
            If you ever wonder what NumberStyles to pass,
            just call this method instead. It will mimic the default behavior of TryParse.
            </summary>
        </member>
        <member name="M:JJ.Framework.Conversion.Int32Parser.TryParse(System.String,System.IFormatProvider,System.Nullable{System.Int32}@)">
            <summary> Parses a nullable Int32. </summary>
        </member>
        <member name="M:JJ.Framework.Conversion.Int32Parser.TryParse(System.String,System.Globalization.NumberStyles,System.Nullable{System.Int32}@)">
            <summary> Parses a nullable Int32. </summary>
        </member>
        <member name="M:JJ.Framework.Conversion.Int32Parser.TryParse(System.String,System.Nullable{System.Int32}@)">
            <summary> Parses a nullable Int32. </summary>
        </member>
        <member name="M:JJ.Framework.Conversion.Int32Parser.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Nullable{System.Int32}@)">
            <summary> Parses a nullable Int32. </summary>
        </member>
        <member name="T:JJ.Framework.Conversion.Int64Parser">
            <summary>
            For instance making it easier to parse nullable Int64.
            Static classes cannot get extension members.
            Otherwise these would have been extensions.
            Instead we have the Int64Parser class for extra static members.
            </summary>
        </member>
        <member name="M:JJ.Framework.Conversion.Int64Parser.TryParse(System.String,System.IFormatProvider,System.Int64@)">
            <summary>
            If you want to use Int64.TryParse with a format provider,
            then you are obliged to also pass NumberStyles.
            If you ever wonder what NumberStyles to pass,
            just call this method instead. It will mimic the default behavior of TryParse.
            </summary>
        </member>
        <member name="M:JJ.Framework.Conversion.Int64Parser.TryParse(System.String,System.IFormatProvider,System.Nullable{System.Int64}@)">
            <summary> Parses a nullable Int64. </summary>
        </member>
        <member name="M:JJ.Framework.Conversion.Int64Parser.TryParse(System.String,System.Globalization.NumberStyles,System.Nullable{System.Int64}@)">
            <summary> Parses a nullable Int64. </summary>
        </member>
        <member name="M:JJ.Framework.Conversion.Int64Parser.TryParse(System.String,System.Nullable{System.Int64}@)">
            <summary> Parses a nullable Int64. </summary>
        </member>
        <member name="M:JJ.Framework.Conversion.Int64Parser.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Nullable{System.Int64}@)">
            <summary> Parses a nullable Int64. </summary>
        </member>
        <member name="T:JJ.Framework.Conversion.SingleParser">
            <summary>
            For instance making it easier to parse nullable Single.
            Static classes cannot get extension members.
            Otherwise these would have been extensions.
            Instead we have the SingleParser class for extra static members.
            </summary>
        </member>
        <member name="M:JJ.Framework.Conversion.SingleParser.TryParse(System.String,System.IFormatProvider,System.Single@)">
            <summary>
            If you want to use Single.TryParse with a format provider,
            then you are obliged to also pass NumberStyles.
            If you ever wonder what NumberStyles to pass,
            just call this method instead. It will mimic the default behavior of TryParse.
            </summary>
        </member>
        <member name="M:JJ.Framework.Conversion.SingleParser.TryParse(System.String,System.IFormatProvider,System.Nullable{System.Single}@)">
            <summary> Parses a nullable Single. </summary>
        </member>
        <member name="M:JJ.Framework.Conversion.SingleParser.TryParse(System.String,System.Globalization.NumberStyles,System.Nullable{System.Single}@)">
            <summary> Parses a nullable Single. </summary>
        </member>
        <member name="M:JJ.Framework.Conversion.SingleParser.TryParse(System.String,System.Nullable{System.Single}@)">
            <summary> Parses a nullable Single. </summary>
        </member>
        <member name="M:JJ.Framework.Conversion.SingleParser.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Nullable{System.Single}@)">
            <summary> Parses a nullable Single. </summary>
        </member>
        <member name="T:JJ.Framework.Conversion.SimpleTypeConverter">
            <summary> Makes it easier to convert simple types. </summary>
        </member>
        <member name="M:JJ.Framework.Conversion.SimpleTypeConverter.ParseValue``1(System.String)">
            <summary>
            One method to parse numeric types, their signed and unsigned variations, DateTime, TimeSpan, Guid and Enum types, IntPtr, UIntPtr 
            and their nullable variations. Those often require different types of conversions. This method just takes care of it.
            </summary>
        </member>
        <member name="M:JJ.Framework.Conversion.SimpleTypeConverter.ParseValue``1(System.String,System.IFormatProvider)">
            <summary>
            One method to parse numeric types, their signed and unsigned variations, DateTime, TimeSpan, Guid and Enum types, IntPtr, UIntPtr 
            and their nullable variations. Those often require different types of conversions. This method just takes care of it.
            </summary>
        </member>
        <member name="M:JJ.Framework.Conversion.SimpleTypeConverter.ParseValue(System.String,System.Type)">
            <summary>
            One method to parse numeric types, their signed and unsigned variations, DateTime, TimeSpan, Guid and Enum types, IntPtr, UIntPtr 
            and their nullable variations. Those often require different types of conversions. This method just takes care of it.
            </summary>
        </member>
        <member name="M:JJ.Framework.Conversion.SimpleTypeConverter.ParseValue(System.String,System.Type,System.IFormatProvider)">
            <summary>
            One method to parse numeric types, their signed and unsigned variations, DateTime, TimeSpan, Guid and Enum types, IntPtr, UIntPtr 
            and their nullable variations. Those often require different types of conversions. This method just takes care of it.
            </summary>
        </member>
        <member name="M:JJ.Framework.Conversion.SimpleTypeConverter.ConvertValue``1(System.Object)">
            <summary> Makes it easier to convert nullables along with non-nullables. </summary>
        </member>
        <member name="M:JJ.Framework.Conversion.SimpleTypeConverter.ConvertValue(System.Object,System.Type)">
            <summary> Makes it easier to convert nullables along with non-nullables. </summary>
        </member>
    </members>
</doc>
