<?xml version="1.0"?>
<doc>
    <assembly>
        <name>JJ.Framework.Business</name>
    </assembly>
    <members>
        <member name="M:JJ.Framework.Business.EntityStatusHelper.GetListIsDirty``2(System.Collections.Generic.IList{``0},System.Func{``0,System.Object},System.Collections.Generic.IList{``1},System.Func{``1,System.Object},System.Boolean)">
            <summary>
            Compares two lists (a source list of data and a destination list of data).
            Determines whether a list is dirty.
            This means that it checks whether items were removed,
            added or changed.
            The changing of items does not mean that the entities themselves
            are dirty, it means that a list position now points to another object.
            </summary>
        </member>
        <member name="P:JJ.Framework.Business.IResult.Messages">
            <summary> not nullable, auto-instantiated </summary>
        </member>
        <member name="T:JJ.Framework.Business.ISideEffect">
            <summary>
            Used for some polymorphism between small pieces of business logic that go off as a result of altering or creating data.
            For instance storing the date time modified or setting default values
            or automatically generating a name might all be wrapped in side-effects,
            that are executed upon calling methods, like Create, Update and Delete.
            Using a separate class for side-effects, creates overview over those pieces of business logic,
            that are the most creative of all, and prevents those special things that need to happen from being entangled with other code.
            </summary>
        </member>
        <member name="T:JJ.Framework.Business.ManyToOneRelationship`2">
            <summary>
            Manages the inverse property in a one to n relation ship.
            Don't forget to use _child in your method implementations.
            </summary>
        </member>
        <member name="T:JJ.Framework.Business.OneToManyRelationship`2">
            <summary>
            Manages the inverse property in a one to n relation ship.
            Don't forget to use _parent in your method implementations.
            </summary>
        </member>
        <member name="P:JJ.Framework.Business.ResultBase.Messages">
            <inheritdoc />
        </member>
    </members>
</doc>
